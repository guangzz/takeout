<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.takeout.mapper.OrdersMapper">
  <resultMap id="BaseResultMap" type="com.example.takeout.entity.Orders">
    <id column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="createTime" jdbcType="DATE" property="createtime" />
    <result column="restaurant_id" jdbcType="INTEGER" property="restaurantId" />
    <result column="order_describe" jdbcType="VARCHAR" property="orderDescribe" />
    <result column="order_total" jdbcType="DECIMAL" property="orderTotal" />
    <result column="order_status" jdbcType="INTEGER" property="orderStatus" />
  </resultMap>
  <sql id="Base_Column_List">
    order_id, user_id, createTime, restaurant_id, order_describe, order_total, order_status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from orders
    where order_id = #{orderId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from orders
    where order_id = #{orderId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="order_id" keyProperty="orderId" parameterType="com.example.takeout.entity.Orders" useGeneratedKeys="true">
    insert into order (user_id, createTime, restaurant_id,
      order_describe, order_total, order_status
      )
    values (#{userId,jdbcType=INTEGER}, #{createtime,jdbcType=DATE}, #{restaurantId,jdbcType=INTEGER},
      #{orderDescribe,jdbcType=VARCHAR}, #{orderTotal,jdbcType=DECIMAL}, #{orderStatus,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyColumn="order_id" keyProperty="orderId" parameterType="com.example.takeout.entity.Orders" useGeneratedKeys="true">
    insert into orders
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
      <if test="restaurantId != null">
        restaurant_id,
      </if>
      <if test="orderDescribe != null">
        order_describe,
      </if>
      <if test="orderTotal != null">
        order_total,
      </if>
      <if test="orderStatus != null">
        order_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=DATE},
      </if>
      <if test="restaurantId != null">
        #{restaurantId,jdbcType=INTEGER},
      </if>
      <if test="orderDescribe != null">
        #{orderDescribe,jdbcType=VARCHAR},
      </if>
      <if test="orderTotal != null">
        #{orderTotal,jdbcType=DECIMAL},
      </if>
      <if test="orderStatus != null">
        #{orderStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.takeout.entity.Orders">
    update orders
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=DATE},
      </if>
      <if test="restaurantId != null">
        restaurant_id = #{restaurantId,jdbcType=INTEGER},
      </if>
      <if test="orderDescribe != null">
        order_describe = #{orderDescribe,jdbcType=VARCHAR},
      </if>
      <if test="orderTotal != null">
        order_total = #{orderTotal,jdbcType=DECIMAL},
      </if>
      <if test="orderStatus != null">
        order_status = #{orderStatus,jdbcType=INTEGER},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.takeout.entity.Orders">
    update orders
    set user_id = #{userId,jdbcType=INTEGER},
      createTime = #{createtime,jdbcType=DATE},
      restaurant_id = #{restaurantId,jdbcType=INTEGER},
      order_describe = #{orderDescribe,jdbcType=VARCHAR},
      order_total = #{orderTotal,jdbcType=DECIMAL},
      order_status = #{orderStatus,jdbcType=INTEGER}
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>
  <select id="findUserOrder" parameterType="com.example.takeout.entity.User" resultType="com.example.takeout.entity.Orders">
    select
      <include refid="Base_Column_List"/>
    from orders
    where user_id=#{userId} and order_status=1
  </select>
  <!-- 由定时器调用,将15分钟内未支付的订单取消(修改订单状态) -->
  <update id="updateOverdueOrders">
      update orders set order_status=500
      where createTime &lt; date_sub( now(), interval 2 minute ) and order_status=0
  </update>
</mapper>