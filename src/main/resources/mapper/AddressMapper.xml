<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.takeout.mapper.AddressMapper">
  <resultMap id="BaseResultMap" type="com.example.takeout.entity.Address">
    <id column="address_id" jdbcType="INTEGER" property="addressId" />
    <result column="address_value" jdbcType="VARCHAR" property="addressValue" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="address_phone" jdbcType="VARCHAR" property="addressPhone" />
    <result column="address_name" jdbcType="VARCHAR" property="addressName" />
  </resultMap>
  <sql id="Base_Column_List">
    address_id, address_value, user_id, address_phone,address_name
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from address
    where address_id = #{addressId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from address
    where address_id = #{addressId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="address_id" keyProperty="addressId" parameterType="com.example.takeout.entity.Address" useGeneratedKeys="true">
    insert into address (address_value, user_id, address_phone,address_name
      )
    values (#{addressValue,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, #{addressPhone,jdbcType=VARCHAR},#{addressName,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="address_id" keyProperty="addressId" parameterType="com.example.takeout.entity.Address" useGeneratedKeys="true">
    insert into address
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="addressValue != null">
        address_value,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="addressPhone != null">
        address_phone,
      </if>
      <if test="addressName != null">
        address_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="addressValue != null">
        #{addressValue,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="addressPhone != null">
        #{addressPhone,jdbcType=VARCHAR},
      </if>
      <if test="addressName != null">
        #{addressName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.takeout.entity.Address">
    update address
    <set>
      <if test="addressValue != null">
        address_value = #{addressValue,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="addressPhone != null">
        address_phone = #{addressPhone,jdbcType=VARCHAR},
      </if>
      <if test="addressPhone != null">
        address_name = #{addressName,jdbcType=VARCHAR},
      </if>
    </set>
    where address_id = #{addressId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.takeout.entity.Address">
    update address
    set address_value = #{addressValue,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      address_phone = #{addressPhone,jdbcType=VARCHAR},
      address_name = #{addressName,jdbcType=VARCHAR}
    where address_id = #{addressId,jdbcType=INTEGER}
  </update>
  <select id="findByUserId" parameterType="java.lang.Integer" resultType="com.example.takeout.entity.Address">
    select <include refid="Base_Column_List"/> from address where user_id=#{id}
  </select>
  <update id="updateById" parameterType="com.example.takeout.entity.Address">
    update address
    <trim prefix="set" suffixOverrides=",">
      <if test="addressValue != null">
        address_value=#{addressValue},
      </if>
      <if test="addressPhone != null">
        address_phone=#{addressPhone},
      </if>
      <if test="addressName != null">
        address_name=#{addressName},
      </if>
    </trim>
    where address_id=#{addressId}
  </update>
</mapper>